#version 430

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct Vertex {
    vec4 position;
    vec4 normal;
    vec4 color;
    vec2 texCoord;
    float padding1;
    float padding2;
};

layout (std430, binding = 0) buffer InVertices {
    Vertex vertices[];
};

layout (std430, binding = 1) buffer PrevPositions {
    vec4 prevPositions[];
};

layout (std430, binding = 2) buffer NewPositions {
    vec4 newPositions[];
};

uniform float deltaTime;
uniform vec4 gravity;
uniform mat4 invModelMatrix;

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= vertices.length() || index >= prevPositions.length()) {
        return; 
    }

    vec4 localGravity = invModelMatrix * gravity;
    vec4 gravityForce = localGravity * vertices[index].color;

    vec4 currentPosition = vertices[index].position;
    vec4 previousPosition = prevPositions[index];

    // Verlet integration update
    vec4 newPosition = 2 * currentPosition - previousPosition + gravityForce * (deltaTime * deltaTime);

    newPositions[index] = newPosition;
    prevPositions[index] = currentPosition;
}